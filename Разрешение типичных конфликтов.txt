В этом блоке мы поговорим о разрешении типичных конфликтов,
возникающих при синхронизации локального репозитория с удалённым.
Напомним, что такое конфликт. Это ситуация, при которой на сервере в
удалённом репозитории и у вас в локальном репозитории созданы разные
коммиты:
Такие конфликты бывают двух видов: простые, которые могут быть
разрешены автоматически, самим Git-ом, и сложные, которые можно разрешить
только вручную.
Чтобы создать простой конфликт, вам нужно внести изменения в один
файл в локальной ветке и в другой файл в удалённой. В этом случае команда “git
status” покажет вам, что ваш локальный репозиторий на один коммит впереди
последней версии удалённого репозитория, которую вы к себе загружали:
20
Работа с удалёнными репозиториями
И, казалось бы, надо просто выполнить “git push”, чтобы отправить этот
коммит в удалённый репозиторий и чтобы оба репозитория синхронизировались,
но после выполнения этой команды вы видите, что ничего не получилось и
появилось “страшное” сообщение об ошибке:
На самом деле, в этом сообщении нет ничего страшного. В нём лишь
написано, что удалённый репозиторий содержит изменения, которых у вас ещё
нет локально. И также в этом сообщении Git вам предлагает выполнить вначале
команду “git pull”, чтобы загрузить эти изменения:
git pull
После выполнения этой команды может появиться текстовый редактор, в
котором будет предложено ввести сообщение коммита. Поскольку у нас был
конфликт версий, то есть две конфликтующие версии кода, при затягивании
изменений Git попытается их слить с вашей рабочей копией.
Мы говорили с вами, что поменяем разные файлы, поэтому Git сможет
слить изменения легко: изменения одного файла будут взяты из локального
репозитория, изменения второго — из удалённого. На самом деле, в момент Git их
уже слил, и результат слияния у нас лежит в текущей рабочей копии, и он не
закоммичен. И чтобы его сразу закоммитить, Git предложит вам отредактировать
сообщение коммита по умолчанию.
21
Работа с удалёнными репозиториями
Редактор, в котором, как правило, предлагается это сделать, называется
vim. Вы можете изменить в нём сообщение коммита, затем нажать “Esc”, чтобы
выйти из режима редактирования, и далее выйти из самого редактора и
сохранить сообщение коммита командой:
:wq
Эта команда сохраняет изменённое сообщение коммита. Вы можете также
и просто выйти из этого редактора, набрав команду “:q” без буквы “w”, и тогда
сообщение коммита будет установлено по умолчанию.
После этого слияние файлов удалённого репозитория с файлами
локального завершится, и у вас появится ещё один коммит, но он появится только
локально. Чтобы другие разработчики его увидели и увидели ваши изменения в
коде, которые вы делали до этого, вам нужно отправить его в удалённый
репозиторий:
git push
Теперь давайте рассмотрим сложный конфликт, который Git не сможет
разрешить автоматически. Создать его можно, внеся разные изменения в одну и
ту же строку одного и того же файла. В этом случае вам также следует сначала
выполнить команду:
git pull
Появится сообщение об ошибке: “Automatic merge failed; fix conflicts and
then commit the result”. Git, опять же, сольёт файл из удалённого репозитория с
файлом, который был в вашем локальном репозитории, но пометит в этом файле
обе версии кода, которые он не смог слить, и не сделал коммит.
Локальная версия кода будет размещена между строками “<<<<<<< HEAD”
и “=======”, а удалённая версия — между строками “=======” и “>>>>>>> hash”,
где hash — это хэш коммита из удалённого репозитория. Вот пример того, как это
может выглядеть в файле:
22
Работа с удалёнными репозиториями
Такой конфликт слияния вам нужно разрешить вручную: отредактировать
этот файл и выбрать ту часть, которая будет более правильной, или объединить
их как-то по-своему, после чего сохранить и закоммитить сделанные изменения.
Вообще алгоритм решения любых проблем с Git очень прост:
1. Первым шагом вам нужно ознакомиться с содержанием сообщения о
возникшей ошибке и с рекомендациями, которые даёт сам Git.
2. На втором шаге вам нужно осознать, что, собственно, случилось, вникнуть
и действительно понять проблему.
3. После этого либо решить проблему самостоятельно, либо последовать
рекомендациям самого Git-а.
Важно, что решать проблему имеет смысл только тогда, когда вы её
поняли. Крайне не рекомендуется сразу при возникновении сообщения об
ошибке гуглить решения и выполнять их в командной строке. Это часто приводит
ко всё большему непониманию происходящего и ухудшению ситуации, из
23
Работа с удалёнными репозиториями
которой выбраться будет сложнее. Поэтому вначале вам следует прочитать, что
пишет Git, попытаться понять, что действительно случилось — что с чем
конфликтует и почему, а потом уже решать проблему.
Что можно почитать еще?
1. Синхронизация в Git
2. Разрешение конфликтов в Git
3. Официальная документация по git remote
